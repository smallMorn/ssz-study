<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <properties resource="generator/mgb-config.properties" />

    <context id="Mysql" targetRuntime="MyBatis3Simple"
             defaultModelType="flat">
        <property name="beginningDelimiter" value="`" />
        <property name="endingDelimiter" value="`" />

        <plugin type="${mapper.plugin}">
            <!-- 配置后生成的 Mapper 接口都会自动继承该接口 -->
            <property name="mappers" value="${mapper.Mapper}" />
            <!-- caseSensitive 是否区分大小写，默认值 false。
                如果数据库区分大小写，这里就需要配置为 true，
                这样当表名为 USER 时，会生成 @Table(name = "USER") 注解，否则使用小写 user 时会找不到表。
            -->
            <!--<property name="caseSensitive" value="false"/>-->
            <!-- forceAnnotation 是否强制生成注解，默认 false，
                如果设置为 true，不管数据库名和字段名是否一致，
                都会生成注解（包含 @Table 和 @Column）。
            -->
            <!--<property name="forceAnnotation" value="false"/>-->
            <!-- beginningDelimiter 和 endingDelimiter 开始和结束分隔符，对于有关键字的情况下适用 -->
            <!--<property name="beginningDelimiter" value="`"/>
            <property name="endingDelimiter" value="`"/>-->
            <!-- useMapperCommentGenerator 是否使用通用 Mapper 提供的注释工具，默认 true 使用，
                这样在生成代码时会包含字段的注释（目前只有 mysql 和 oracle 支持），
                设置 false 后会用默认的，或者你可以配置自己的注释插件。
            -->
            <!--<property name="useMapperCommentGenerator" value="true"/>-->
            <!-- lombok 增加 model 代码生成时，
                可以直接生成 lombok 的 @Data@Getter@Setter@ToString@Accessors(chain = true) 等注解，
                即可生成对应包含注解的 model 类。
            -->
            <property name="lombok" value="Data,Accessors"/>
        </plugin>

        <jdbcConnection driverClass="${jdbc.driverClass}"
                        connectionURL="${jdbc.url}" userId="${jdbc.user}" password="${jdbc.password}">
        </jdbcConnection>

<!--        <javaTypeResolver type="${mapper.javaTypeResolver}">-->
<!--            <property name="forceIntegers" value="true"/>-->
<!--            <property name="forceBigDecimals" value="true"/>-->
            <!-- This property is used to specify whether MyBatis Generator should force the use of JSR-310 data types for DATE, TIME,
            and TIMESTAMP fields, rather than using java.util.Date -->
<!--            <property name="useJSR310Types" value="true"/>-->
<!--        </javaTypeResolver>-->

        <javaModelGenerator targetPackage="${targetModelPackage}"
                            targetProject="${targetJavaProject}" />

        <javaClientGenerator targetPackage="${targetMapperPackage}"
                             targetProject="${targetJavaProject}" type="ANNOTATEDMAPPER" />

        <table tableName="region" domainObjectName="Region">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
        <table tableName="user" domainObjectName="User">
            <generatedKey column="id" sqlStatement="JDBC"/>
        </table>
    </context>
</generatorConfiguration>